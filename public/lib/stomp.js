// Generated by CoffeeScript 1.4.0


  var Byte, Client, Frame, Stomp,
    __hasProp = {}.hasOwnProperty;


  Client = (function() {

    function Client() {
      //this.socket = socket;
      //this.socket.binaryType = "arraybuffer";
      this.counter = 0;
      this.connected = false;
      this.subscriptions = {};
    }

    Client.prototype._transmit = function(command, body) {
      
      return this.socket.emit(command,body);
    };

 

    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {
	
     
	
		
		    var headers = AuthenticationManager.getHeaders();
			var querystring= "authentication=user,pass," + headers.USERID +"," + headers["TOKEN"].split(';')[0].split('=')[1];
			//var querystring = "authentication=user,pass,123,wesddned";
			//console.log(querystring);
			var url = nodejs_constants.nodejs_url ;
			
			var socket = io.connect(url,{query:querystring}); 
			socket.on('CONNECTED', function (data) 	{
				console.log(data);
				Client.prototype.socket = this;
				connectCallback();
			});
			//console.log(Client);
		
	

    };


    Client.prototype.subscribe = function(destination, callback, headers) {
		//alert(destination);	
		
      if (headers == null) {
        headers = {};
      }
      if (!headers.id) {
        headers.id = "sub-" + this.counter++;
      }
      headers.destination = destination;
	destination = destination.split('/')[2];
	this.subscriptions[headers.id] = destination;
      //this.subscriptions[destination] = callback;
	  this._transmit("SUBSCRIBE", {ticker:destination});
	  this.socket.on(destination,function(message){callback(message.toString());});
		return headers.id; 
    };

    Client.prototype.unsubscribe = function(id) {
	//alert(id);	
	var ticker = this.subscriptions[id];
   // alert(ticker);	 
    Client.prototype.socket.removeListener(ticker);
	 // delete this.subscriptions[id];
      return this._transmit("UNSUBSCRIBE", {
        ticker:ticker
      });
    };
    return Client;

  })();

  Stomp = {
      client: function(url) {
	  return new Client();
} 
};

 
